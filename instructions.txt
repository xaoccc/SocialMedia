
I. Django REST API with JWT Authentication
1. Install python on your machine

2. Create virtual environment (venv):
python -m venv <path_to_venv>

3, Activate venv:
.\venv\Scripts\activate

4. Install dependencies:
pip install -r requirements.txt

5. Create new Django project:
django-admin startproject jwt_project

6. Update settings.py:
INSTALLED_APPS = [
    ...,
    'rest_framework',
    'rest_framework.authtoken',
    'dj_rest_auth'
]

7. Migrate:
Go in .../jwt_project/:
python manage.py migrate

8. Set the default authentication class for DRF views
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'dj_rest_auth.jwt_auth.JWTCookieAuthentication',
    )
}

9. Configure dj-rest-auth and djangorestframework-simplejwt:

from datetime import timedelta

# djangorestframework-simplejwt
SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(hours=1),
    "REFRESH_TOKEN_LIFETIME": timedelta(days=1),
}

# dj-rest-auth
REST_AUTH = {
    "USE_JWT": True,
    "JWT_AUTH_COOKIE": "_auth",  # Name of access token cookie
    "JWT_AUTH_REFRESH_COOKIE": "_refresh", # Name of refresh token cookie
    "JWT_AUTH_HTTPONLY": False,  # Makes sure refresh token is sent
}

10. Expose authentication endpoints in urls.py

from django.contrib import admin
from django.urls import path, include

urlpatterns = [
    path('admin/', admin.site.urls),
    path('api/v1/auth/', include('dj_rest_auth.urls'))
]

10.1 Test the urls
At this point all django-rest endpoints should be available. 
But if we try to see the current logged-in user here http://127.0.0.1:8000/api/v1/auth/user/,
we have no access.

We can test them is we create a super user:
python manage.py createsuperuser
username: pesho
email: pesho@pesho.com
password: pesho123

We can now log in with these credentials on http://127.0.0.1:8000/api/v1/auth/login/
Now that we have logged in, we can see the user here: http://127.0.0.1:8000/api/v1/auth/user/

10.2 List of all available urls:
/api/v1/auth/login/ dj_rest_auth.views.LoginView rest_login
/api/v1/auth/logout/ dj_rest_auth.views.LogoutView rest_logout
/api/v1/auth/password/change/ dj_rest_auth.views.PasswordChangeView rest_password_change
/api/v1/auth/password/reset/ dj_rest_auth.views.PasswordResetView rest_password_reset
/api/v1/auth/password/reset/confirm/ dj_rest_auth.views.PasswordResetConfirmView rest_password_reset_confirm
/api/v1/auth/token/refresh/ dj_rest_auth.jwt_auth.RefreshViewWithCookieSupport token_refresh
/api/v1/auth/token/verify/ rest_framework_simplejwt.views.TokenVerifyView token_verify
/api/v1/auth/user/ dj_rest_auth.views.UserDetailsView rest_user_details

These three require additional email settings and will not work out of the box:
/api/v1/auth/password/change/ dj_rest_auth.views.PasswordChangeView rest_password_change
/api/v1/auth/password/reset/ dj_rest_auth.views.PasswordResetView rest_password_reset
/api/v1/auth/password/reset/confirm/ dj_rest_auth.views.PasswordResetConfirmView rest_password_reset_confirm

11. Using Authorization Header instead of Cookie (optional, usually better for React apps)
11.1 Add djangorestframework-simplejwt to INSTALLED_APPS:
INSTALLED_APPS = [
    ...
    'rest_framework_simplejwt'
]
11.2 Change the default authentication class for Django REST framework:
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    )
}
11.3 Disable cookies from being sent in the response by removing these two settings from REST_AUTH:
REST_AUTH = {
    "USE_JWT": True,
    # "JWT_AUTH_COOKIE": "_auth",  # Don't send access token cookie
    # "JWT_AUTH_REFRESH_COOKIE": "_refresh", # Don't send refresh token cookie
    "JWT_AUTH_HTTPONLY": False,  # Makes sure refresh token is sent
}


II. Django REST framework JWT Authentication Sign up API with email confirmation.
1. Install dependencies:
pip install dj-rest-auth[with_social]
pip freeze -r requirements.txt

2. Update INSTALLED APPS:
INSTALLED_APPS = [
    ...,
    'django.contrib.sites',
    ...
    'rest_framework',
    'rest_framework.authtoken',
    ...
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'dj_rest_auth.registration',
]

3. Add site ID:
SITE_ID = 1

4. Add auth account middleware:
MIDDLEWARE = [
    ...
    "allauth.account.middleware.AccountMiddleware",
]

5. Add django-allauth settings to Django’s settings.py.
ACCOUNT_AUTHENTICATION_METHOD = "email"  # Use Email / Password authentication
ACCOUNT_USERNAME_REQUIRED = False
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_EMAIL_VERIFICATION = "none" # Do not require email confirmation

6. Run Django migrations:
python manage.py migrate

7. Add the new registration endpoints in urls.py:
urlpatterns = [
    path("admin/", admin.site.urls),
    path("api/v1/auth/", include("dj_rest_auth.urls")),
    path('api/v1/auth/registration/', include('dj_rest_auth.registration.urls'))
    ...
]

7.1. List of the new available urls:
/api/v1/auth/registration/      dj_rest_auth.registration.views.RegisterView    rest_register
/api/v1/auth/registration/account-confirm-email/<key>/  django.views.generic.base.TemplateView  account_confirm_email
/api/v1/auth/registration/account-email-verification-sent/      django.views.generic.base.TemplateView  account_email_verification_sent
/api/v1/auth/registration/resend-email/ dj_rest_auth.registration.views.ResendEmailVerificationView     rest_resend_email
/api/v1/auth/registration/verify-email/ dj_rest_auth.registration.views.VerifyEmailView rest_verify_email

We can use /api/v1/auth/registration/ for creating a new user
At this point we can create a new user using POST method at this url without providing a username, because of this setting: ACCOUNT_USERNAME_REQUIRED = False

7.2. Override default behaviour (OPTIONAL)

If you want to modify the accepted parameters or perform any action on user creation, you can use a custom RegisterSerializer by specifying it in the settings.

REST_AUTH = {
    ...
    "REGISTER_SERIALIZER": "myapp.serializers.CustomRegisterSerializer",
}

Detailed information here:
https://dj-rest-auth.readthedocs.io/en/latest/configuration.html

8. Email verification (OPTIONAL)
8.1. Go to your google profile and enable 2-step verification
8.2. Setup an app password.
app: jwt_project
pass: wwyg xxky ucjj whfe

8.3. Setup django email:
EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
EMAIL_HOST = "smtp.gmail.com"
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_HOST_USER = "<your-email-address>" # email sending address
EMAIL_HOST_PASSWORD = "<app-password>"

8.4. Update email settings:
ACCOUNT_EMAIL_VERIFICATION = "mandatory" # Require email confirmation
ACCOUNT_CONFIRM_EMAIL_ON_GET = True  # No need to sent POST request to confirmation link
LOGIN_URL = "/"  # Path, users will be redirected to after email verification
Note that the path should start with "/", otherwise it will throw an error

8.5. Register a new user and check the email received from the host. If you click on the verification link in the email, you'll get an error.
That is why we need to add url for this verification.
8.6. Update urls.py:

from django.contrib import admin
from django.urls import path, include, re_path
from allauth.account.views import ConfirmEmailView

urlpatterns = [
    path('admin/', admin.site.urls),
    path('api/v1/auth/', include('dj_rest_auth.urls')),
        re_path(
        "^api/v1/auth/registration/account-confirm-email/(?P<key>[-:\w]+)/$",
        ConfirmEmailView.as_view(),
        name="account_confirm_email",
    ),
    path('api/v1/auth/registration/', include('dj_rest_auth.registration.urls'))
]

8.7. Setup a PostgreSQL database (OPTIONAL):
install dependencies:
pip install psycopg2
pip install python-dotenv

Enter database data into .env
Update settings.py:

import os
from pathlib import Path
from datetime import timedelta
from dotenv import load_dotenv

load_dotenv()
BASE_DIR = Path(__file__).resolve().parent.parent

SECRET_KEY = os.getenv('SECRET_KEY')
...

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': os.getenv('DB_NAME'),
        'USER': os.getenv('DB_USER'),
        'PASSWORD': os.getenv('DB_PWD'),
        'PORT': os.getenv('DB_PORT'),
        'HOST': os.getenv('DB_HOST'), 
    }
}

8.8. api/v1/auth/login/ is not working with the credentials provided in api/v1/auth/registration/. So create a custom auth backend, a file named auth_backend.py:
from django.contrib.auth.backends import ModelBackend
from django.contrib.auth import get_user_model

UserModel = get_user_model()

class EmailBackend(ModelBackend):
    """
    Authenticate using email and password.
    """
    def authenticate(self, request, email=None, password=None, **kwargs):
        if email is None or password is None:
            return None

        try:
            user = UserModel.objects.get(email=email)
        except UserModel.DoesNotExist:
            return None

        if user.check_password(password) and self.user_can_authenticate(user):
            return user

        return None

8.9. Update settings.py:
AUTHENTICATION_BACKENDS = [
    'jwt_project.auth_backends.EmailBackend',
]

TODO: On registration check if email if in the db and if yes, do not create user

III. Login with Google
1. In https://console.cloud.google.com/ add Client ID for Web application
2. In .env add the credentials:
GOOGLE_OAUTH_CLIENT_ID=
GOOGLE_OAUTH_CLIENT_SECRET=
GOOGLE_OAUTH_CALLBACK_URL=

3. Update settings.py:
GOOGLE_OAUTH_CLIENT_ID = os.getenv("GOOGLE_OAUTH_CLIENT_ID")
GOOGLE_OAUTH_CLIENT_SECRET = os.getenv("GOOGLE_OAUTH_CLIENT_SECRET")
GOOGLE_OAUTH_CALLBACK_URL = os.getenv("GOOGLE_OAUTH_CALLBACK_URL")

4. Add allauth.socialaccount.provider.google to INSTALLED_APPS in your Django settings.py:
INSTALLED_APPS = [
    ...
    'allauth.socialaccount',
    'allauth.socialaccount.providers.google', # <- Support Login with Google
    ...
]

5. Add allauth’s social provider configuration.
# Authenticate if local account with this email address already exists
SOCIALACCOUNT_EMAIL_AUTHENTICATION = True
# Connect local account and social account if local account with that email address already exists
SOCIALACCOUNT_EMAIL_AUTHENTICATION_AUTO_CONNECT = True
SOCIALACCOUNT_PROVIDERS = {
    "google": {
        "APPS": [
            {
                "client_id": GOOGLE_OAUTH_CLIENT_ID,
                "secret": GOOGLE_OAUTH_CLIENT_SECRET,
                "key": "",
            },
        ],
        "SCOPE": ["profile", "email"],
        "AUTH_PARAMS": {
            "access_type": "online",
        },
    }
}

6. Create a new Django app for the google accounts:
python manage.py startapp accounts

7. Create a GoogleLogin view that will be using dj-rest-auth's components inside accounts/views.py:
from allauth.socialaccount.providers.google.views import GoogleOAuth2Adapter
from allauth.socialaccount.providers.oauth2.client import OAuth2Client
from dj_rest_auth.registration.views import SocialLoginView
from django.conf import settings


class GoogleLogin(SocialLoginView):
    adapter_class = GoogleOAuth2Adapter
    callback_url = settings.GOOGLE_OAUTH_CALLBACK_URL
    client_class = OAuth2Client


8. Create a GoogleLoginCallback view.

...
from urllib.parse import urljoin
import requests
from django.urls import reverse
from rest_framework import status
from rest_framework.response import Response
from rest_framework.views import APIView

...

class GoogleLoginCallback(APIView):
    def get(self, request, *args, **kwargs):
        """
        If you are building a fullstack application (eq. with React app next to Django)
        you can place this endpoint in your frontend application to receive
        the JWT tokens there - and store them in the state
        """

        code = request.GET.get("code")

        if code is None:
            return Response(status=status.HTTP_400_BAD_REQUEST)
        
        # Remember to replace the localhost:8000 with the actual domain name before deployment
        token_endpoint_url = urljoin("http://localhost:8000", reverse("google_login"))
        response = requests.post(url=token_endpoint_url, data={"code": code})

        return Response(response.json(), status=status.HTTP_200_OK)

9. Create a simple login page.

from django.conf import settings
from django.shortcuts import render
from django.views import View

...

class LoginPage(View):
    def get(self, request, *args, **kwargs):
        return render(
            request,
            "pages/login.html",
            {
                "google_callback_uri": settings.GOOGLE_OAUTH_CALLBACK_URL,
                "google_client_id": settings.GOOGLE_OAUTH_CLIENT_ID,
            },
        )

10. login.htmlTemplate:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Sign In</title>
    <style>
        body {
            width: 100vw;
            height: 100vh;
        }

        .center {
            height: 100%;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .container {
            width: 400px;
            padding: 20px;
            border: 1px solid gray;
            border-radius: 4px;
        }

        .title {
            text-align: center;
        }
    </style>
</head>
<body>
<div class="center">
    <div class="container">
        <h1 class="title">Sign in</h1>
        <a href="https://accounts.google.com/o/oauth2/v2/auth?redirect_uri={{ google_callback_uri }}&prompt=consent&response_type=code&client_id={{ google_client_id }}&scope=openid%20email%20profile&access_type=offline">
            Sign in with Google
        </a>
    </div>
</div>
</body>
</html>

11. Expose API endpoints in urls.py :
from django.contrib import admin
from django.urls import include, path, re_path

from accounts.views import GoogleLogin, GoogleLoginCallback, LoginPage

urlpatterns = [
    path("admin/", admin.site.urls),
    path("login/", LoginPage.as_view(), name="login"),
    path("api/v1/auth/", include("dj_rest_auth.urls")),
    re_path(r"^api/v1/auth/accounts/", include("allauth.urls")),
    path("api/v1/auth/registration/", include("dj_rest_auth.registration.urls")),
    path("api/v1/auth/google/", GoogleLogin.as_view(), name="google_login"),
    path(
        "api/v1/auth/google/callback/",
        GoogleLoginCallback.as_view(),
        name="google_login_callback",
    ),
]

12. Add accounts to the apps in settings.py:
INSTALLED_APPS = [
   ...
    'accounts',
   ...
]
13. Visit http://127.0.0.1:8000/login/ and try to sign in. If all above steps are completed, you should be able to sign in with google account.

INTEGRATE WITH REACT/VITE:
1. Go to root dir and install React with the following commands:
npm create vite -> choose React -> choose JavaScript

Install dependencies:
npm install react-router-dom

2. In src dir create config.js:

export const googleCallbackUri = "http://localhost:5173/google/callback/";
export const googleClientId = import.meta.env.VITE_GOOGLE_OAUTH_CLIENT_ID;
5173 is the default port for Vite app, change it if you use another port

3. App.jsx:
import { googleCallbackUri, googleClientId } from './config.js';

function App() {
  const googleSignInUrl = `https://accounts.google.com/o/oauth2/v2/auth?redirect_uri=${googleCallbackUri}&prompt=consent&response_type=code&client_id=${googleClientId}&scope=openid%20email%20profile&access_type=offline`;

  return (
    <div style={{ padding: 20 }}>
      <a href={googleSignInUrl}>Sign in with Google</a>
    </div>
  );
}

export default App;

4. Update Django's .env file:
GOOGLE_OAUTH_CALLBACK_URL=http://localhost:5173/google/callback/

5. Update the endpoints in google cloud console:
Authorised JavaScript origins:
http://localhost:5173

Authorised redirect URIs:
Add this one:
http://localhost:5173/google/callback/

6. In src dir create loader.js:

import './index.css';
import { redirect } from 'react-router-dom';

export const handleGoogleCallback = async (context) => {
  // Exchange callback's code for JWT tokens

  const { request } = context;
  const url = new URL(request.url);
  const code = url.searchParams.get('code');

  if (code) {
    try {
      const response = await fetch('http://localhost:8000/api/v1/auth/google/', {
        method: 'POST',
        body: JSON.stringify({ code }),
        headers: {
          'Content-Type': 'application/json',
        },
      });

      const jwtData = await response.json();
      console.log(jwtData);

      return redirect('/');
    } catch (err) {
      console.error(err);
      throw new Response('Bad request', { status: 400 });
    }
  }

  throw new Response('Not Found', { status: 404 });
};


7. Update main.jsx:

import React from 'react';
import ReactDOM from 'react-dom/client';
import App from './App.tsx';
import './index.css';
import { createBrowserRouter, RouterProvider } from 'react-router-dom';
import { handleGoogleCallback } from './loader.ts';

const router = createBrowserRouter([
  {
    path: '/',
    element: <App />,
  },
  {
    path: '/google/callback',
    loader: handleGoogleCallback,
    element: <div>Loading...</div>,
  },
]);

ReactDOM.createRoot(document.getElementById('root')!).render(
  <React.StrictMode>
    <RouterProvider router={router} />
  </React.StrictMode>,
);

8. Add corsheaders to INSTALLED_APPS:

INSTALLED_APPS = [
    ...
    'corsheaders'
]

9. Update middleware:
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'allauth.account.middleware.AccountMiddleware',
]

10. Add CORS settings:
if DEBUG:
    CORS_ALLOW_ALL_ORIGINS = True
    CORS_ALLOW_CREDENTIALS = True
else:
    CORS_ALLOWED_ORIGINS = [
        "http://localhost:5173/",
    ]





